



import smm.moh.iu.Formas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import java.awt.image.LookupTable;
import java.util.List;
import sm.image.EqualizationOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;
import smm.moh.graficos.MiFigura;
import smm.moh.graficos.MiRectangularShape;
import smm.moh.audio.ManejadorAudio;
import smm.moh.imagen.FiltroBosqueOp;
import smm.moh.imagen.NegativoOp;
import smm.moh.imagen.RandomOp;
import smm.moh.imagen.SepiaOp;
import smm.moh.imagen.UmbralizacionOp;









/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author eyehalcon97
 * Mi clase VentanaPrincipal
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    int grados =0;
    private boolean barraestado=true;
    private boolean barraformas=true;
    private boolean barraatributos=true;
    private boolean barraimagen=true;
    private boolean barraAudio = true;
    private boolean barralista = true;
    private boolean formas=false;
    Formas form = null;
    Color color = new Color(0,0,0);
    Formas forma=null;
    BufferedImage imgSource=null;

    int cordenadaX = 0;
    int cordenadaY = 0;
    private SMPlayer player = null; 
    private SMRecorder recorder=null;
    private File rec=new File("Bufer");
    private List<MiFigura> lista;
    private MiLista list_model = new MiLista();
    /**
    *
    * Constructor por defecto
    * 
    * 
    */
    public VentanaPrincipal() {
        initComponents();
        this.setSize(1000, 720);
        botonstop.setEnabled(false);
        li.setModel(list_model);
        jPanel17.setVisible(false);
        
        Instantanea.setEnabled(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jDialog1 = new javax.swing.JDialog();
        menu = new javax.swing.ButtonGroup();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        list = new javax.swing.JMenu();
        pie = new javax.swing.JPanel();
        estado = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        head = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        nav1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        nav2 = new javax.swing.JPanel();
        lapiz = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        elipse = new javax.swing.JToggleButton();
        String = new javax.swing.JToggleButton();
        nav3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        degh = new javax.swing.JToggleButton();
        Relleno = new javax.swing.JButton();
        Borde = new javax.swing.JButton();
        Degradado = new javax.swing.JButton();
        degv = new javax.swing.JToggleButton();
        nav4 = new javax.swing.JPanel();
        numeroalisar = new javax.swing.JSpinner();
        relleno = new javax.swing.JToggleButton();
        Alisar = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        numtrans = new javax.swing.JSlider();
        jPanel11 = new javax.swing.JPanel();
        Trazado = new javax.swing.JComboBox<>();
        jPanel18 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        botonplay = new javax.swing.JButton();
        botonstop = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        jPanel21 = new javax.swing.JPanel();
        botonRecord = new javax.swing.JButton();
        Camara = new javax.swing.JButton();
        Instantanea = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Filtro = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        contrasteoscuro = new javax.swing.JButton();
        contrastenormal = new javax.swing.JButton();
        aclarar = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        MiFuncion = new javax.swing.JButton();
        Seno = new javax.swing.JButton();
        Tintado = new javax.swing.JButton();
        Umbralizador = new javax.swing.JButton();
        Duplicar = new javax.swing.JButton();
        Ecualizacion = new javax.swing.JButton();
        Sepia = new javax.swing.JButton();
        Negativo = new javax.swing.JButton();
        Tinte = new javax.swing.JSlider();
        umbral = new javax.swing.JSlider();
        Random = new javax.swing.JButton();
        FiltroBosque = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        EspectroColor = new javax.swing.JButton();
        espectro = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jSlider2 = new javax.swing.JSlider();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        reducir = new javax.swing.JButton();
        aumentar = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        Subir = new javax.swing.JButton();
        Bajar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        X = new javax.swing.JSpinner();
        jPanel24 = new javax.swing.JPanel();
        mod = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        Y = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        li = new javax.swing.JList<>();
        Escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        FileNuevo = new javax.swing.JMenuItem();
        FileAbrir = new javax.swing.JMenuItem();
        FileGuardar = new javax.swing.JMenuItem();
        Edicion = new javax.swing.JMenu();
        EdicionVerbarra = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Acercade = new javax.swing.JMenuItem();

        jButton4.setText("jButton4");

        list.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pie.setMinimumSize(new java.awt.Dimension(869, 20));
        pie.setPreferredSize(new java.awt.Dimension(2409, 20));
        pie.setLayout(new java.awt.BorderLayout());

        estado.setText("Paint");
        pie.add(estado, java.awt.BorderLayout.PAGE_END);
        pie.add(jSeparator2, java.awt.BorderLayout.CENTER);

        getContentPane().add(pie, java.awt.BorderLayout.PAGE_END);

        head.setAutoscrolls(true);
        head.setMaximumSize(new java.awt.Dimension(300, 320));
        head.setMinimumSize(new java.awt.Dimension(20, 320));
        head.setPreferredSize(new java.awt.Dimension(50, 120));
        head.setLayout(new java.awt.GridLayout(2, 0));

        jPanel8.setMaximumSize(new java.awt.Dimension(70, 70));
        jPanel8.setMinimumSize(new java.awt.Dimension(70, 70));
        jPanel8.setPreferredSize(new java.awt.Dimension(2222, 70));
        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        nav1.setMaximumSize(new java.awt.Dimension(32767, 60));
        nav1.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/NuevoBoceto.GIF"))); // NOI18N
        jButton1.setToolTipText("Nuevo Lienzo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        nav1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/abrir.png"))); // NOI18N
        jButton2.setToolTipText("Abrir Archivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileAbrirActionPerformed(evt);
            }
        });
        nav1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Guardar.gif"))); // NOI18N
        jButton3.setToolTipText("Guardar Archivo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileGuardarActionPerformed(evt);
            }
        });
        nav1.add(jButton3);

        jPanel8.add(nav1);

        nav2.setMaximumSize(new java.awt.Dimension(32767, 60));
        nav2.setLayout(new java.awt.GridLayout(1, 0));

        lapiz.setName("Lapiz");
        menu.add(lapiz);
        lapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Lapiz.gif"))); // NOI18N
        lapiz.setToolTipText("Punto");
        lapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                herramienta(evt);
            }
        });
        nav2.add(lapiz);

        linea.setName("Linea");
        menu.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Linea.gif"))); // NOI18N
        linea.setToolTipText("Linea");
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                herramienta(evt);
            }
        });
        nav2.add(linea);

        rectangulo.setName("Rectangulo");
        menu.add(rectangulo);
        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Rectangulo.gif"))); // NOI18N
        rectangulo.setToolTipText("Rectangulo");
        rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                herramienta(evt);
            }
        });
        nav2.add(rectangulo);

        elipse.setName("Elipse");
        menu.add(elipse);
        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Ovalo.gif"))); // NOI18N
        elipse.setToolTipText("Elipse");
        elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                herramienta(evt);
            }
        });
        nav2.add(elipse);

        String.setName("string");
        menu.add(String);
        String.setText("S");
        String.setToolTipText("String");
        String.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                herramienta(evt);
            }
        });
        nav2.add(String);

        jPanel8.add(nav2);

        nav3.setMaximumSize(new java.awt.Dimension(32767, 60));
        nav3.setLayout(new java.awt.GridLayout(0, 4));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Relleno");
        nav3.add(jLabel7);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Borde");
        nav3.add(jLabel8);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Degradado");
        nav3.add(jLabel11);

        degh.setText("Horizontal");
        degh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deghActionPerformed(evt);
            }
        });
        nav3.add(degh);

        Relleno.setToolTipText("Color Relleno");
        Relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RellenoActionPerformed(evt);
            }
        });
        nav3.add(Relleno);

        Borde.setToolTipText("Color Borde");
        Borde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BordeActionPerformed(evt);
            }
        });
        nav3.add(Borde);

        Degradado.setToolTipText("Color Degradado");
        Degradado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegradadoActionPerformed(evt);
            }
        });
        nav3.add(Degradado);

        degv.setText("Vertical");
        degv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degvActionPerformed(evt);
            }
        });
        nav3.add(degv);

        jPanel8.add(nav3);

        nav4.setMaximumSize(new java.awt.Dimension(32767, 60));
        nav4.setLayout(new java.awt.GridLayout(1, 0));

        numeroalisar.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        numeroalisar.setToolTipText("Grosor");
        numeroalisar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numeroalisarStateChanged(evt);
            }
        });
        nav4.add(numeroalisar);

        relleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rellenar.png"))); // NOI18N
        relleno.setToolTipText("Relleno");
        relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoActionPerformed(evt);
            }
        });
        nav4.add(relleno);

        Alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/alisar.png"))); // NOI18N
        Alisar.setToolTipText("Alisar");
        Alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlisarActionPerformed(evt);
            }
        });
        nav4.add(Alisar);

        jPanel1.setLayout(new java.awt.GridLayout(0, 1));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Transparencia");
        jPanel1.add(jLabel12);

        numtrans.setMaximum(255);
        numtrans.setToolTipText("Transparencia");
        numtrans.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numtransStateChanged(evt);
            }
        });
        jPanel1.add(numtrans);

        nav4.add(jPanel1);

        jPanel8.add(nav4);

        jPanel11.setAutoscrolls(true);
        jPanel11.setMaximumSize(new java.awt.Dimension(20, 100));
        jPanel11.setMinimumSize(new java.awt.Dimension(20, 100));
        jPanel11.setPreferredSize(new java.awt.Dimension(20, 100));
        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        Trazado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "linea continua", "linea discontinua" }));
        Trazado.setMaximumSize(new java.awt.Dimension(20, 100));
        Trazado.setMinimumSize(new java.awt.Dimension(20, 100));
        Trazado.setPreferredSize(new java.awt.Dimension(20, 100));
        Trazado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrazadoActionPerformed(evt);
            }
        });
        jPanel11.add(Trazado);

        jPanel8.add(jPanel11);

        jPanel18.setMaximumSize(new java.awt.Dimension(100, 60));
        jPanel18.setMinimumSize(new java.awt.Dimension(100, 34));
        jPanel18.setPreferredSize(new java.awt.Dimension(100, 34));
        jPanel18.setLayout(new java.awt.GridLayout(0, 1));

        jPanel26.setLayout(new java.awt.GridLayout(1, 0));

        botonplay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play24x24.png"))); // NOI18N
        botonplay.setToolTipText("Play");
        botonplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonplayActionPerformed(evt);
            }
        });
        jPanel26.add(botonplay);

        botonstop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop24x24.png"))); // NOI18N
        botonstop.setToolTipText("Parar");
        botonstop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonstopActionPerformed(evt);
            }
        });
        jPanel26.add(botonstop);

        listaReproduccion.setToolTipText("Lista de reproduccion");
        listaReproduccion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaReproduccionItemStateChanged(evt);
            }
        });
        listaReproduccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaReproduccionActionPerformed(evt);
            }
        });
        jPanel26.add(listaReproduccion);

        jPanel18.add(jPanel26);

        jPanel21.setLayout(new java.awt.GridLayout(1, 0));

        botonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/record24x24.png"))); // NOI18N
        botonRecord.setToolTipText("Grabar");
        botonRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRecordActionPerformed(evt);
            }
        });
        jPanel21.add(botonRecord);

        Camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Camara.png"))); // NOI18N
        Camara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CamaraActionPerformed(evt);
            }
        });
        jPanel21.add(Camara);

        Instantanea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Capturar.png"))); // NOI18N
        Instantanea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstantaneaActionPerformed(evt);
            }
        });
        jPanel21.add(Instantanea);

        jPanel18.add(jPanel21);

        jPanel8.add(jPanel18);

        head.add(jPanel8);

        jPanel2.setMaximumSize(new java.awt.Dimension(150, 100));
        jPanel2.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel4.setMaximumSize(new java.awt.Dimension(100, 100));
        jPanel4.setMinimumSize(new java.awt.Dimension(100, 100));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel4.setLayout(new java.awt.GridLayout(0, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Brillo");
        jPanel4.add(jLabel1);

        jSlider1.setMinimum(-100);
        jSlider1.setToolTipText("Brillo");
        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSlider1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSlider1FocusLost(evt);
            }
        });
        jPanel4.add(jSlider1);

        jPanel2.add(jPanel4);

        jPanel5.setMaximumSize(new java.awt.Dimension(100, 90));
        jPanel5.setMinimumSize(new java.awt.Dimension(100, 90));
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 90));
        jPanel5.setLayout(new java.awt.GridLayout(0, 1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Filtro");
        jPanel5.add(jLabel2);

        Filtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "media", "binomial", "enfoque", "relieve", "laplaciano" }));
        Filtro.setSelectedItem("Seleccione");
        Filtro.setToolTipText("Varios Filtros");
        Filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltroActionPerformed(evt);
            }
        });
        jPanel5.add(Filtro);

        jPanel2.add(jPanel5);

        jPanel6.setMaximumSize(new java.awt.Dimension(120, 90));
        jPanel6.setMinimumSize(new java.awt.Dimension(60, 52));
        jPanel6.setPreferredSize(new java.awt.Dimension(80, 52));
        jPanel6.setLayout(new java.awt.GridLayout(0, 1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Contraste");
        jPanel6.add(jLabel3);

        jPanel9.setLayout(new java.awt.GridLayout(0, 3));

        contrasteoscuro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/oscurecer.png"))); // NOI18N
        contrasteoscuro.setToolTipText("Oscurecer");
        contrasteoscuro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteoscuroActionPerformed(evt);
            }
        });
        jPanel9.add(contrasteoscuro);

        contrastenormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/contraste.png"))); // NOI18N
        contrastenormal.setToolTipText("Contraste");
        contrastenormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastenormalActionPerformed(evt);
            }
        });
        jPanel9.add(contrastenormal);

        aclarar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iluminar.png"))); // NOI18N
        aclarar.setToolTipText("Iluminado");
        aclarar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aclararActionPerformed(evt);
            }
        });
        jPanel9.add(aclarar);

        jPanel6.add(jPanel9);

        jPanel2.add(jPanel6);

        jPanel10.setMaximumSize(new java.awt.Dimension(800, 90));
        jPanel10.setMinimumSize(new java.awt.Dimension(300, 90));
        jPanel10.setPreferredSize(new java.awt.Dimension(500, 90));
        jPanel10.setLayout(new java.awt.GridLayout(2, 3));

        MiFuncion.setText("MiFuncion (sqrt(log10(x))");
        MiFuncion.setToolTipText("Mi funcion");
        MiFuncion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiFuncionActionPerformed(evt);
            }
        });
        jPanel10.add(MiFuncion);

        Seno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sinusoidal.png"))); // NOI18N
        Seno.setToolTipText("Funcion seno");
        Seno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SenoActionPerformed(evt);
            }
        });
        jPanel10.add(Seno);

        Tintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tintar.png"))); // NOI18N
        Tintado.setText("(Relleno)");
        Tintado.setToolTipText("Aplicar Tintado ( Color del Relleno)");
        Tintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TintadoActionPerformed(evt);
            }
        });
        jPanel10.add(Tintado);

        Umbralizador.setText("Umbralizacion");
        Umbralizador.setToolTipText("Aplicar Filtro umbralizacion");
        Umbralizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UmbralizadorActionPerformed(evt);
            }
        });
        jPanel10.add(Umbralizador);

        Duplicar.setText("Duplicar");
        Duplicar.setToolTipText("Duplicar imagen seleccionada");
        Duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicarActionPerformed(evt);
            }
        });
        jPanel10.add(Duplicar);

        Ecualizacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ecualizar.png"))); // NOI18N
        Ecualizacion.setToolTipText("Ecualizacion de la imagen");
        Ecualizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EcualizacionActionPerformed(evt);
            }
        });
        jPanel10.add(Ecualizacion);

        Sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sepia.png"))); // NOI18N
        Sepia.setText("Sepia");
        Sepia.setToolTipText("Aplicar fitro sepia");
        Sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SepiaActionPerformed(evt);
            }
        });
        jPanel10.add(Sepia);

        Negativo.setText("Negativo");
        Negativo.setToolTipText("Aplicar Filtro negativo");
        Negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativoActionPerformed(evt);
            }
        });
        jPanel10.add(Negativo);
        jPanel10.add(Tinte);

        umbral.setMaximum(255);
        umbral.setValue(125);
        jPanel10.add(umbral);

        Random.setText("RandomFiltro");
        Random.setToolTipText("Aplicar filtro Random");
        Random.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomActionPerformed(evt);
            }
        });
        jPanel10.add(Random);

        FiltroBosque.setText("FiltroBosque");
        FiltroBosque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltroBosqueActionPerformed(evt);
            }
        });
        jPanel10.add(FiltroBosque);

        jPanel2.add(jPanel10);

        jPanel15.setMaximumSize(new java.awt.Dimension(160, 80));
        jPanel15.setMinimumSize(new java.awt.Dimension(160, 68));
        jPanel15.setPreferredSize(new java.awt.Dimension(160, 68));
        jPanel15.setLayout(new java.awt.GridLayout(0, 1));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Color");
        jPanel15.add(jLabel6);

        jPanel16.setLayout(new java.awt.GridLayout(1, 0));

        EspectroColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bandas.png"))); // NOI18N
        EspectroColor.setToolTipText("Extraer bandas");
        EspectroColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EspectroColorActionPerformed(evt);
            }
        });
        jPanel16.add(EspectroColor);

        espectro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "RGB", "YCC", "GREY" }));
        espectro.setToolTipText("Espectro de color");
        espectro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espectroActionPerformed(evt);
            }
        });
        jPanel16.add(espectro);

        jPanel15.add(jPanel16);

        jPanel2.add(jPanel15);

        jPanel3.setMaximumSize(new java.awt.Dimension(100, 80));
        jPanel3.setLayout(new java.awt.GridLayout(0, 1));

        jLabel4.setText("Rotacion");
        jPanel3.add(jLabel4);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jSlider2.setMaximum(360);
        jSlider2.setToolTipText("Rotacion");
        jSlider2.setPreferredSize(new java.awt.Dimension(100, 16));
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        jSlider2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSlider2FocusLost(evt);
            }
        });
        jSlider2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSlider2PropertyChange(evt);
            }
        });
        jPanel12.add(jSlider2);

        jPanel3.add(jPanel12);

        jPanel2.add(jPanel3);

        jPanel13.setMaximumSize(new java.awt.Dimension(100, 90));
        jPanel13.setLayout(new java.awt.GridLayout(0, 1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Escala");
        jPanel13.add(jLabel5);

        jPanel14.setLayout(new java.awt.GridLayout(1, 0));

        reducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disminuir.png"))); // NOI18N
        reducir.setToolTipText("Disminuir Escala");
        reducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reducirActionPerformed(evt);
            }
        });
        jPanel14.add(reducir);

        aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/aumentar.png"))); // NOI18N
        aumentar.setToolTipText("Aumentar Escala");
        aumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarActionPerformed(evt);
            }
        });
        jPanel14.add(aumentar);

        jPanel13.add(jPanel14);

        jPanel2.add(jPanel13);

        head.add(jPanel2);

        getContentPane().add(head, java.awt.BorderLayout.PAGE_START);

        jPanel17.setMaximumSize(new java.awt.Dimension(542, 763));
        jPanel17.setMinimumSize(new java.awt.Dimension(542, 763));
        jPanel17.setLayout(new java.awt.BorderLayout());

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel20.setLayout(new java.awt.GridBagLayout());

        Subir.setText("Subir");
        Subir.setToolTipText("Aumentar propiedad de figura");
        Subir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubirActionPerformed(evt);
            }
        });
        jPanel20.add(Subir, new java.awt.GridBagConstraints());

        Bajar.setText("Bajar");
        Bajar.setToolTipText("Disminuir propiedad de figura");
        Bajar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BajarActionPerformed(evt);
            }
        });
        jPanel20.add(Bajar, new java.awt.GridBagConstraints());

        Eliminar.setText("Eliminar");
        Eliminar.setToolTipText("Eliminar Figura");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });
        jPanel20.add(Eliminar, new java.awt.GridBagConstraints());

        jPanel19.add(jPanel20, java.awt.BorderLayout.PAGE_START);

        jPanel17.add(jPanel19, java.awt.BorderLayout.PAGE_START);

        jPanel22.setLayout(new java.awt.GridBagLayout());

        jPanel23.setLayout(new java.awt.GridLayout(0, 1));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Coordenada X");
        jPanel23.add(jLabel9);

        X.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        X.setPreferredSize(new java.awt.Dimension(80, 30));
        X.setRequestFocusEnabled(false);
        X.setValue(1);
        X.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                XValor(evt);
            }
        });
        jPanel23.add(X);

        jPanel22.add(jPanel23, new java.awt.GridBagConstraints());

        jPanel24.setLayout(new java.awt.BorderLayout());

        mod.setText("Aceptar");
        mod.setToolTipText("Mover Figura");
        mod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modActionPerformed(evt);
            }
        });
        jPanel24.add(mod, java.awt.BorderLayout.CENTER);

        jPanel22.add(jPanel24, new java.awt.GridBagConstraints());

        jPanel25.setLayout(new java.awt.GridLayout(0, 1));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Coordenada Y");
        jPanel25.add(jLabel10);

        Y.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        Y.setPreferredSize(new java.awt.Dimension(80, 30));
        Y.setValue(1);
        Y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                YValor(evt);
            }
        });
        jPanel25.add(Y);

        jPanel22.add(jPanel25, new java.awt.GridBagConstraints());

        jPanel17.add(jPanel22, java.awt.BorderLayout.PAGE_END);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(259, 131));

        li.setModel(list_model);
        li.setMaximumSize(new java.awt.Dimension(40, 180));
        li.setMinimumSize(new java.awt.Dimension(40, 180));
        li.setPreferredSize(new java.awt.Dimension(40, 180));
        li.setValueIsAdjusting(true);
        li.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(li);

        jPanel17.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel17, java.awt.BorderLayout.LINE_END);

        Escritorio.setMaximumSize(new java.awt.Dimension(1841, 732));
        Escritorio.setMinimumSize(new java.awt.Dimension(1841, 732));
        Escritorio.setName(""); // NOI18N

        javax.swing.GroupLayout EscritorioLayout = new javax.swing.GroupLayout(Escritorio);
        Escritorio.setLayout(EscritorioLayout);
        EscritorioLayout.setHorizontalGroup(
            EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3021, Short.MAX_VALUE)
        );
        EscritorioLayout.setVerticalGroup(
            EscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 963, Short.MAX_VALUE)
        );

        getContentPane().add(Escritorio, java.awt.BorderLayout.CENTER);

        File.setText("Archivo");
        File.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                FileMouseEntered(evt);
            }
        });
        File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileActionPerformed(evt);
            }
        });

        FileNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/NuevoBoceto.GIF"))); // NOI18N
        FileNuevo.setText("Nuevo");
        menu.add(FileNuevo);
        FileNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileNuevoActionPerformed(evt);
            }
        });
        File.add(FileNuevo);

        FileAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/abrir.png"))); // NOI18N
        FileAbrir.setText("Abrir");
        FileAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileAbrirActionPerformed(evt);
            }
        });
        File.add(FileAbrir);

        FileGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Guardar.gif"))); // NOI18N
        FileGuardar.setText("Guardar");
        FileGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileGuardarActionPerformed(evt);
            }
        });
        File.add(FileGuardar);

        jMenuBar1.add(File);

        Edicion.setText("Edición");

        EdicionVerbarra.setSelected(true);
        EdicionVerbarra.setText("Ver barra de estado");
        EdicionVerbarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdicionVerbarraActionPerformed(evt);
            }
        });
        Edicion.add(EdicionVerbarra);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Ver barra de formas");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        Edicion.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Ver barra de atributos");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        Edicion.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("Ver tratamiento de imagen");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        Edicion.add(jCheckBoxMenuItem3);

        jCheckBoxMenuItem4.setSelected(true);
        jCheckBoxMenuItem4.setText("Ver Audio");
        jCheckBoxMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem4ActionPerformed(evt);
            }
        });
        Edicion.add(jCheckBoxMenuItem4);

        jCheckBoxMenuItem5.setSelected(true);
        jCheckBoxMenuItem5.setText("Ver Lista de Figuras");
        jCheckBoxMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem5ActionPerformed(evt);
            }
        });
        Edicion.add(jCheckBoxMenuItem5);

        jMenuBar1.add(Edicion);

        jMenu1.setText("Ayuda");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        Acercade.setText("Acerca de");
        Acercade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcercadeActionPerformed(evt);
            }
        });
        jMenu1.add(Acercade);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FileMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_FileMouseEntered
    /**
    *
    * Guarda el archivo ya sea de audio como de 
    * video
    * 
    */
    private void FileGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileGuardarActionPerformed
        // TODO add your handling code here:
        if(listaReproduccion.getSelectedItem() ==null){
            if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
                VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
                if (vi != null) {     
                    JFileChooser dlg = new JFileChooser();
            
                    int resp = dlg.showSaveDialog(this);     
                    if (resp == JFileChooser.APPROVE_OPTION) {     
                        try {       
                            BufferedImage img = vi.getLienzoImagen().getImagen(true);      
                            if (img != null) {        
                                File f = dlg.getSelectedFile();       
                                ImageIO.write(img, "png", f);         
                                vi.setTitle(f.getName());       
                                }    
                        }catch (Exception ex) {       
                            System.err.println("Error al guardar la imagen");     
                        }
                    }
                }
            }
        }else{
            rec= (File)listaReproduccion.getSelectedItem();
        JFileChooser dlg = new JFileChooser();
       dlg.setSelectedFile(rec);
        int resp = dlg.showSaveDialog(this);
        
        if (resp == JFileChooser.APPROVE_OPTION) {

            File f = new File( dlg.getSelectedFile().getAbsolutePath() ){
                @Override
                public String toString(){
                    return this.getName();
                }
            };
            rec.renameTo(f);

            }
        }
    }//GEN-LAST:event_FileGuardarActionPerformed
    /**
    *
    * Abrir archivo
    * con el if comprobamos cual es el tipo del
    * archivo que queremos abrir, de esta forma lo 
    * abrimos correctamente
    * 
    */
    private void FileAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {     
            try{       
                File f = dlg.getSelectedFile();
                
                boolean encontrado = false;
                    int j=0;
                    for(int i=f.toString().length()-1;encontrado;i--){
                        if(f.toString().indexOf(i) == '/'){
                            j=i++;
                            encontrado=true;
                        }
                    }
                    String substring = f.toString().substring(j, f.toString().length());
                    f = new File( substring  ){   
                        @Override   
                        public String toString(){     
                            return this.getName();   
                        } 
                    }; 
                
               
                if(f.toString().contains(".png")||f.toString().contains("jpg")||f.toString().contains("jpeg")||f.toString().contains(".PNG")){
                    
                    BufferedImage img = ImageIO.read(f);  
                VentanaLienzo vi = new VentanaLienzo(this,img.getHeight(),img.getWidth()); 
                vi.getLienzoImagen().setImagen(img);      
                vi.setTitle(substring);
                vi.setTitle(f.getName());  
                this.Escritorio.add(vi);        
                      
                vi.setVisible(true);     
                actualizarframe();
                vi.actualizardesplazable();
                vi.repaint();
                }
                if(f.toString().contains(".wav") || f.toString().contains(".au") || f.toString().contains(".aif")){
                    
                    listaReproduccion.addItem(f); 

                }
                if(f.toString().contains(".mp4")||f.toString().contains(".mpg")){
                    VentanaVideo vi = new VentanaVideo(this,f,botonstop,botonplay);
                    vi.setTitle(substring);
                    Escritorio.add(vi); 
                    vi.setVisible(true);
                    vi.play();
                    
                }
                
            }catch(Exception ex){       
                System.err.println("Error al leer el archivo");     }   }
        
    }//GEN-LAST:event_FileAbrirActionPerformed
    /**
    *
    * Constructor de nuevo lienzo
    * Establece en el label Paint,
    * actualiza el color a 0 y limpia la lista del menu
    * 
    */
    private void FileNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileNuevoActionPerformed
        // TODO add your handling code here:
         estado.setText("Paint");
        forma = null;
        color = new Color(0,0,0);
        menu.clearSelection();
    }//GEN-LAST:event_FileNuevoActionPerformed
    /**
    *
    * Activar o desactivar la barra de estado
    *
    */
    private void EdicionVerbarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdicionVerbarraActionPerformed
        // TODO add your handling code here:
        barraestado = !barraestado;
        estado.setVisible(barraestado);
        pie.setVisible(barraestado);
        jSeparator2.setVisible(barraestado);
    }//GEN-LAST:event_EdicionVerbarraActionPerformed

 
    /**
    *
    * Actualiza las herramientas dependiendo del frame
    * sacamos el frame seleccionado del escritorio y vamos
    * leyendo los atributos de todo el frame para actualizar
    * nuestro menu en la ventana principal
    * Si barralista es false no tenemos desactivada la lista de figuras
    * 
    */
    public void actualizarframe(){
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
             imgSource = null;
            if (vi != null) {
                jPanel17.setVisible(barralista);
                form = vi.getLienzoImagen().getForma();
                if(form == Formas.PUNTO){
                    lapiz.setSelected(true);
                }
                if(form == Formas.LINEA){
                    linea.setSelected(true);
                }
                if(form == Formas.RECTANGULO){
                    rectangulo.setSelected(true);
                }
                if(form == Formas.ELIPSE){
                    elipse.setSelected(true);
                }
                if(form == null){
                    vi.getLienzoImagen().setFormas(forma);
                }
                Color col = vi.getLienzoImagen().getBorde();
                Borde.setBackground(col);
                col = vi.getLienzoImagen().getRelleno();
                Relleno.setBackground(col);
                relleno.setSelected(vi.getLienzoImagen().getRellenado());
                col = vi.getLienzoImagen().getDegradado();
                Degradado.setBackground(col);
                numtrans.setValue(vi.getLienzoImagen().getNumtrans());
                Alisar.setSelected(vi.getLienzoImagen().getAlisar());
                numtrans.setValue(vi.getLienzoImagen().getNumtrans());
                numeroalisar.setValue(vi.getLienzoImagen().getGrosor());
                jSlider1.setValue((int)(vi.getLienzoImagen().getBrillo()));
                Filtro.setSelectedItem(vi.getLienzoImagen().getFiltro());
                espectro.setSelectedItem(vi.getLienzoImagen().getEspectro());
                degh.setSelected(vi.getLienzoImagen().getdeghorizontal());
                degv.setSelected(vi.getLienzoImagen().getdegvertical());
                actualizarlista();

            }else{
                 jPanel17.setVisible(false);
            }
        }
    }
    /**
    *
    * Actualiza la lista de objetos Mi Figura
    * Lee la lista de figuras del lienzo de la ventana
    * interna seleccionada, a continuacion las introduce
    * en la lista de la pantalla principal
    * Si no hay niguna figura establece formas a false, en caso
    * contrario establece true.
    * 
    */
        
    
    private void actualizarlista(){
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
            if (vi != null) {
                list_model = new MiLista();
                lista = vi.getLienzoImagen().GetLista();
                lista.forEach((s) -> {
                    list_model.addFigura(s);
                });
                li.setModel(list_model);
                if(list_model.getSize()==0){
                    formas =false;
                }else{
                    formas = true;
                }
            }
        }
    }
    
    
    
    /**
    *
    * Actualiza las herramientas dependiendo de la figura seleccionada
    * @param figura: figura de la que obtenemos los datos
    * leemos los atributos de la figura seleccionada de la
    * lista de figuras, y establecemos dichos atributos a la
    * ventana principal
    * 
    */
    private void Actualizarfigura(MiFigura figura){
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
           VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
           if (vi != null) {
                if(figura !=null){
                    Color col = figura.getBorde();
                    Borde.setBackground(col);
                    vi.getLienzoImagen().setBorde(col);
                    numtrans.setValue(figura.getNumtrans());
                    vi.getLienzoImagen().setNumtrans(figura.getNumtrans());
                    Alisar.setSelected(figura.getAlisar());
                    vi.getLienzoImagen().setAlisar(figura.getAlisar());
                    numeroalisar.setValue(figura.getGrosor());
                    vi.getLienzoImagen().setGrosor(figura.getGrosor());
                    if(figura instanceof MiRectangularShape){
                        col = ((MiRectangularShape)figura).getRelleno();
                        Relleno.setBackground(col);
                        vi.getLienzoImagen().setRelleno(col);
                        col = ((MiRectangularShape)figura).getDegradado();
                        Degradado.setBackground(col);
                        vi.getLienzoImagen().setDegradado(col);
                        if(((MiRectangularShape)figura).getRellenado()){
                            relleno.setSelected(true);
                            vi.getLienzoImagen().setRellenado(true);
                            }else{
                            relleno.setSelected(false);
                            vi.getLienzoImagen().setRellenado(false);
                            }
                        if(((MiRectangularShape) figura).getVertical()){
                            degv.setSelected(true);
                        }else{
                            degv.setSelected(false);
                        }
                        if(((MiRectangularShape) figura).getHorizontal()){
                            degh.setSelected(true);
                            vi.getLienzoImagen().setdegvertical(true);
                        }else{
                            degh.setSelected(false);
                            vi.getLienzoImagen().setdegvertical(false);
                        }
                    }
                }
            }       
        }
    }
    /**
    *
    * Envia una señal al lienzo con la forma que queremos dibujar
    * y en caso de que haya una figura seleecionada en la lista de
    * figuras de la ventana principal, la desseleccionamos.
    * 
    */
    private void herramienta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_herramienta
        // TODO add your handling code here:
        
            javax.swing.JToggleButton boton;
            boton = (javax.swing.JToggleButton) evt.getSource();
            switch (boton.getName()){
                case "Lapiz":
                    forma=Formas.PUNTO;
                    break;
                case "Linea":
                    forma = Formas.LINEA;
                    break;
                case "Rectangulo":
                    forma = Formas.RECTANGULO;
                    break;
                case "Elipse":
                    forma = Formas.ELIPSE;
                    break;
                case "string":
                     new SelString(this,false).setVisible(true);
                    forma = Formas.STRING;
                    break;

            }      
            estado.setText(forma.toString());
            if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
                VentanaLienzo vi;  
                vi = (VentanaLienzo)Escritorio.getSelectedFrame();
                if(vi != null){
                    vi.getLienzoImagen().setFormas(forma);
                    if(li.getSelectedValue()!= null){
                        actualizarlista();
                    }

                }
            }
    }//GEN-LAST:event_herramienta

    private void FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_FileActionPerformed
    /**
    *
    * Activa y desactiva la barra de herramientas
    * 
    */
    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
        barraformas = !barraformas;
        nav2.setVisible(barraformas);
        
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed
    /**
    *
    * Crea un nuevo lienzo
    * @param altura: selecciona la altura del lienzo
    * @param anchura: selecciona la anchura del lienzo
    * Establecemos el tamaño que queremos del lienzo en
    * nuestra ventana interna y reseteamos los valores
    * de la ventana principal
    * 
    */
    public void nuevoLienzo(int altura,int anchura){
        if(anchura != 0 && altura != 0){
            VentanaLienzo vi = new VentanaLienzo(this,anchura,altura);
            Escritorio.add(vi);
            vi.setVisible(true);
            actualizarframe();
            altura =0;
            anchura=0;
            }
    }
    /**
    *
    * Abre el cuadro de seleccion de tamaño del lienzo
    * 
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new SelLienzo(this).setVisible(true);
         
         
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
    *
    * Activa el relleno
    * Selecciona el relleno en el lienzo de la ventana interna seleccionada,
    * si hay un objeto seleccionado en la lista de la ventana principal y ese objeto puede tener 
    * relleno, este se le activa.
    * 
    */
    private void rellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi;  
            vi = (VentanaLienzo)Escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzoImagen().setRellenado(!vi.getLienzoImagen().getRellenado());
                if(li.getSelectedValue() != null){
                    if(li.getSelectedValue() instanceof MiRectangularShape){
                        ((MiRectangularShape)li.getSelectedValue()).setRellenado(!((MiRectangularShape)li.getSelectedValue()).getRellenado());
                    }
                    vi.getLienzoImagen().repaint();
                }
            }
        }
    }//GEN-LAST:event_rellenoActionPerformed
    /**
    *
    * Activa el alisado
    * Selecciona el alisado en el lienzo de la ventana interna seleccionada,
    * si hay un objeto seleccionado en la lista de la ventana principal se le activa.
    * 
    */
    private void AlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlisarActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        VentanaLienzo vi;  
        
        vi = (VentanaLienzo)Escritorio.getSelectedFrame();
        if(vi != null){
            vi.getLienzoImagen().setAlisar(!vi.getLienzoImagen().getAlisar());
        if(li.getSelectedValue() != null){
            li.getSelectedValue().setAlisar(!li.getSelectedValue().getAlisar());
            vi.getLienzoImagen().repaint();
        }
        
        }
        }
    }//GEN-LAST:event_AlisarActionPerformed
    /**
    *
    * Modifica el numero del alisado
    * Selecciona el grosor en el lienzo de la ventana interna seleccionada,
    * si hay un objeto seleccionado en la lista de la ventana principal se le activa.
    * 
    */
    private void numeroalisarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numeroalisarStateChanged
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
       VentanaLienzo vi;  
       
        vi = (VentanaLienzo)Escritorio.getSelectedFrame();
        if(vi != null){
            vi.getLienzoImagen().setGrosor(Integer.parseInt(numeroalisar.getValue().toString()));
            if(li.getSelectedValue() != null){
                li.getSelectedValue().setGrosor(Integer.parseInt(numeroalisar.getValue().toString()));
                vi.getLienzoImagen().repaint();
                }
            }
        }
    }//GEN-LAST:event_numeroalisarStateChanged
    /**
    *
    * activa y desactiva la barra de los atributos
    * 
    */
    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        // TODO add your handling code here:
        barraatributos = !barraatributos;
        nav3.setVisible(barraatributos);
        nav4.setVisible(barraatributos);
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed
    /**
    *
    * Selecciona un filtro para la imagen
    * Dependiendo de que filtro seleccionado en el 
    * desplegable le asignamos un Kernel y luego utilizamos
    * Convolve Op con dicho kernel
    * 
    */
    private void FiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltroActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        VentanaLienzo vi = (VentanaLienzo) this.Escritorio.getSelectedFrame();
        if (vi != null)
        {   if(Filtro.getSelectedItem().toString() != "Seleccione"){
            imgSource = vi.getLienzoImagen().getImagen(false);
            if (this.imgSource != null)
                try
                {
                    Kernel k = null;
                    vi.getLienzoImagen().setFiltro(Filtro.getSelectedItem().toString());
                    
                    switch (Filtro.getSelectedItem().toString())
                    {
                        
                        case "media": 
                            k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                            break;
                        case "binomial":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                            break;
                        case "enfoque":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            break;
                        case "relieve":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            break;
                        case "laplaciano":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                            break;
                           
                    }
                    if (k != null)
                    {
                        ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage imgSource = cop.filter(this.imgSource, null);
                        vi.getLienzoImagen().setImagen(imgSource);
                        vi.getLienzoImagen().repaint();
                    }

                } catch (Exception e)
                {
                    System.err.println("No se pudo aplicar el filtro");
                }
            }
        }


        }
        
    }//GEN-LAST:event_FiltroActionPerformed

    private void jSlider1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider1FocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jSlider1FocusGained

    private void jSlider1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider1FocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jSlider1FocusLost
    /**
    *
    * Selecciona el brillo de la imagen
    * Para ello utilizamos el valor sacado del slider del brillo,
    * Con la variable value sacamos la diferencia de valor entre el 
    * brillo nuevo y el brillo establecido,una vez sacado el valor
    * utilizamos RescaleOp teniendo en cuenta si la imagen tiene
    * alpha o no
    * 
    */
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) this.Escritorio.getSelectedFrame();
            if (vi != null){
                try{  
                    ColorModel cm = vi.getLienzoImagen().getImagen(false).getColorModel();
                    WritableRaster raster = vi.getLienzoImagen().getImagen(false).copyData(null);
                    boolean alfaPre = vi.getLienzoImagen().getImagen(false).isAlphaPremultiplied();
                    imgSource = new BufferedImage(cm,raster,alfaPre,null);
                    float value2 =vi.getLienzoImagen().getBrillo();
                    float value = this.jSlider1.getValue();
                    vi.getLienzoImagen().setBrillo(value);
                    value = value-value2;
                    RescaleOp rop;
                        if (alfaPre)
                        {
                            float[] scales = new float[]{1.0f, 1.0f, 1.0f, 1.0f};
                            float[] offsets = new float[]{value, value, value, 0.0f};
                            rop = new RescaleOp(scales, offsets, null);
                        } else{
                            rop = new RescaleOp(1.0f, value, null);
                        }
                        BufferedImage imgdest = rop.filter(imgSource, null);
                        vi.getLienzoImagen().setImagen(imgdest);
                        vi.repaint();
                }catch(Exception e){           
                System.err.println("no se pudo establecer el brillo");       
                } 
            }
        }
    }//GEN-LAST:event_jSlider1StateChanged
    /**
    *
    * Seleccionamos contraste oscuro,
    * para ello utilizamos LookupTable para calcular el valor gamma con el
    * que aplicar el filtro.
    * 
    */
    private void contrasteoscuroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteoscuroActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        VentanaLienzo vi = (VentanaLienzo) (Escritorio.getSelectedFrame());   
            if (vi != null) {     
                BufferedImage imgSource = vi.getLienzoImagen().getImagen(false);
                if(imgSource!=null){             
                    try{              
                        LookupTable l = LookupTableProducer.gammaCorrection(LookupTableProducer.DEFAULT_A_GAMMA, LookupTableProducer.TYPE_GAMMA_CORRECTION);
                        LookupOp lop = new LookupOp(l, null);                 
                        lop.filter( imgSource , imgSource);         
                        vi.repaint();       
                    } catch(Exception e){           
                    System.err.println("No se puedo aplicar el contraste");       
                    }           
                }   
            }
        }
    }//GEN-LAST:event_contrasteoscuroActionPerformed
    /**
    *
    * Seleccionamos contraste normal,
    * para ello utilizamos LookupTable con el tipo SFuncion para
    * aplicar el filtro.
    * 
    */
    private void contrastenormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastenormalActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        VentanaLienzo vi = (VentanaLienzo) (Escritorio.getSelectedFrame());   
            if (vi != null) {     
                BufferedImage imgSource = vi.getLienzoImagen().getImagen(false);
                 if(imgSource!=null){             
                    try{              
                    LookupTable l = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    //l = LookupTableProducer.gammaCorrection(LookupTableProducer.TYPE_GAMMA_CORRECTION, LookupTableProducer.DEFAULT_GAMMA);
                    LookupOp lop = new LookupOp(l, null);                 
                    lop.filter( imgSource , imgSource);         
                    vi.repaint();       
                    } catch(Exception e){           
                        System.err.println("No se puedo aplicar el contraste");       
                    }           
                }      
            }
        }
    }//GEN-LAST:event_contrastenormalActionPerformed
    /**
    *
    * Seleccionamos contraste aclarar,
    * para ello utilizamos LookupTable con el tipo Logaritmico para
    * aplicar el filtro.
    * 
    */
    private void aclararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aclararActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        VentanaLienzo vi = (VentanaLienzo) (Escritorio.getSelectedFrame());   
            if (vi != null) {     
                BufferedImage imgSource = vi.getLienzoImagen().getImagen(false);
                 if(imgSource!=null){             
                    try{              
                        LookupTable l = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                        
                        LookupOp lop = new LookupOp(l, null);                 
                        lop.filter( imgSource , imgSource);         
                        vi.repaint();       
                    } catch(Exception e){           
                    System.err.println("No se puedo aplicar el contraste");       
                    }           
                }   
            }
        }
    }//GEN-LAST:event_aclararActionPerformed
    /**
    *
    * Aplicamos el filtro Seno,
    * para ello extraemos todos los datos de la imagen y le aplicamos la funcion seno
    * 
    */
    private void SenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SenoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            imgSource = vi.getLienzoImagen().getImagen(false);

            if (vi != null){
                try
                {
                    byte[] lt = new byte[256];
                    for (int i = 0; i < 256; ++i){
                        lt[i] = (byte)((Math.abs(255 * Math.sin( 90 * i )))%255);
                    }
                    ByteLookupTable slt = new ByteLookupTable(0, lt);
                    LookupOp lop = new LookupOp(slt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e)
                {
                    System.err.println("No se puedo aplicar el seno");
                }
            }
        }
    }//GEN-LAST:event_SenoActionPerformed
     /**
    *
    * Abre el cuadro de dialogo y selecciona el string 
    *  a poner de la forma MiString, dicho String se
    * le pasa al lienzo para pintar el string
    * 
    * 
    */
    public void setString(String string){
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzoImagen().setString(string);
            }
        }
    }

    private void jSlider2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSlider2PropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jSlider2PropertyChange
    /**
    *
    * Rota la imagen, en nuestro caso hemos hecho que rote tambien las figuras dibujadas
    * por el usuario, por lo que al rotar perdemos las propiedades de esas figuras y 
    * pasaran a ser solo pixeles en el panel, por ello borramos la lista de figuras tras
    * rotar la imagen, calculamos el centro de la imagen y rotamos tantos grados como el
    * valor obtenido del slider de rotacion, rotamos en base a dicho centro.
    * 
    */
    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) (Escritorio.getSelectedFrame()); 
            if (vi != null) {
                if(imgSource == null){
                    imgSource = vi.getLienzoImagen().getImagen(true);
                }
                if(formas){
                    imgSource = vi.getLienzoImagen().getImagen(true);
                    actualizarlista();
                    formas=false;
                }
                try{

                    BufferedImage Dest = new BufferedImage(imgSource.getHeight(), imgSource.getWidth(), BufferedImage.TYPE_INT_ARGB);
                    double r = Math.toRadians(jSlider2.getValue());
                    Point p = vi.getLienzoImagen().getPoint();
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    Dest = atop.filter(imgSource, null);
                    vi.getLienzoImagen().setImagen(Dest);
                    vi.repaint();
                }catch(IllegalArgumentException e){
                    System.err.println();
                }

            }

        }
        
    }//GEN-LAST:event_jSlider2StateChanged
    /**
    *
    * Reducir la escala de la imagen
    * 
    */
    private void reducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reducirActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi != null){
                escalar(0.75);
                vi.actualizardesplazable();
            }
        }
        
        
    }//GEN-LAST:event_reducirActionPerformed
    /**
    *
    * Aumentar la escala de la imagen
    * 
    */
    private void aumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi != null){
                escalar(1.25);
                vi.actualizardesplazable();
            }
        }
    }//GEN-LAST:event_aumentarActionPerformed
    /**
    *
    * Sacar espectro de color,
    * Creamos una nueva ventana interna con cada espectro de color a nivel de gris
    * De esta forma creamos una ventana por cada componente del lienzo
    * luego le aplicamos el filtro de niveles de gris
    * 
    */
    private void EspectroColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EspectroColorActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSrc = vi.getLienzoImagen().getImagen(true);
                int numerobandas=imgSrc.getColorModel().getNumColorComponents();

                for(int i=0;i<numerobandas;i++){
                //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY );
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY); 
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);        
                    int bandList[] = {i};
                    System.out.println(i);
                    WritableRaster bandRaster = (WritableRaster)imgSrc.getRaster().createWritableChild(0,0,imgSrc.getWidth(), imgSrc.getHeight(), 0, 0, bandList);
                    BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
                    VentanaLienzo vi2=new VentanaLienzo(this,imgSrc.getHeight(),imgSrc.getWidth());
                    vi2.getLienzoImagen().setImagen(imgBanda);
                    Escritorio.add(vi2);
                    vi2.setTitle(vi2.getTitle()+ i);
                    vi2.setVisible(true);
                }


            }
        }

    }//GEN-LAST:event_EspectroColorActionPerformed
    /**
    *
    * Consultor de la figura seleccionada
    * 
    */
    public int figuraactual(){
        return li.getSelectedIndex();  
    }
    /**
    *
    * Selecciona una figura de la lista de figuras
    * @param i:numero de la figura en la lista
    * 
    */
    public void Seleccionarfigura(int i){
        li.setSelectedIndex(i);
    }
    /**
    *
    * Convierte la imagen segun el espectro de color
    * Para ello miramos el espectro que tenemos en el lienzo seleccionado
    * y el espectro que queremos conseguir a partir del slider de seleccion
    * de espectro,si este esta en la banda seleccionada
    * no intenta convertirlo, en caso contrario se le aplica
    * el filtro ConvolveOp para convertirlo al espectro deseado
    * 
    */
    private void espectroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espectroActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
        VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
        if (vi != null)
            
        {
            if(espectro.getSelectedItem().toString()!="Seleccione"){
            imgSource = vi.getLienzoImagen().getImagen(true);
            
            if (this.imgSource != null)
                try
                {
                    BufferedImage imgOut =null;
                    ColorSpace cs=null;
                    ColorConvertOp cop=null;
                    vi.getLienzoImagen().setEspectro(espectro.getSelectedItem().toString());
                    switch (espectro.getSelectedItem().toString())
                    {
                        case "RGB":
                            if(imgSource.getColorModel().getColorSpace().isCS_sRGB()){
                                Escritorio.getSelectedFrame().setTitle("RGB");
                                break;
                            }else{
                                cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);   
                                cop = new ColorConvertOp(cs, null);   
                                imgOut = cop.filter(imgSource, null);
                                Escritorio.getSelectedFrame().setTitle("RGB");
                            }
                            vi.getLienzoImagen().setImagen(imgOut);
                            break;
                        case "YCC":
                            cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);   
                            cop = new ColorConvertOp(cs, null);   
                            imgOut = cop.filter(imgSource, null);
                            Escritorio.getSelectedFrame().setTitle("YCC");
                            vi.getLienzoImagen().setImagen(imgOut);
                            break;
                        case "GREY":
                            cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);   
                            cop = new ColorConvertOp(cs, null);   
                            imgOut = cop.filter(imgSource, null);
                            Escritorio.getSelectedFrame().setTitle("GREY");
                            vi.getLienzoImagen().setImagen(imgOut);
                            break;
                    }
                    
                    vi.repaint();

                } catch (Exception e)
                {
                    System.err.println("Error");
                }
            }
        }
        }
    }//GEN-LAST:event_espectroActionPerformed
    /**
    *
    * Selecciona el color en el lienzo
    * @param tipo: donde va el color(relleno,borde,degradado)
    * @param color: color seleccionado
    * Se consulta el string tipo(relleno,borde,degradado)
    * Una vez consultado, se establece dicho color en el tipo en el lienzo de la 
    * ventana interna seleccionada, si en la lista de objetos de la ventana
    * principal hay algun objeto seleccionado, si se le puede aplicar se le aplica
    * 
    */
    public void selcolor(String tipo,Color color){
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                if (tipo.equals("Relleno")){
                    Relleno.setBackground(color);
                    vi.getLienzoImagen().setRelleno(color);
                    if(li.getSelectedValue() !=null){
                        if(li.getSelectedValue() instanceof MiRectangularShape){
                            ((MiRectangularShape)li.getSelectedValue()).setRelleno(color);
                        }

                        vi.getLienzoImagen().repaint();
                    }
                }
                if (tipo.equals("Borde")){
                    Borde.setBackground(color);
                    vi.getLienzoImagen().setBorde(color);
                    if(li.getSelectedValue() !=null){
                    li.getSelectedValue().setBorde(color);
                    vi.getLienzoImagen().repaint();
                    }
                }
                if (tipo.equals("Degradado")){
                    Degradado.setBackground(color);
                    vi.getLienzoImagen().setDegradado(color);
                    if(li.getSelectedValue() !=null){
                        if(li.getSelectedValue()  instanceof MiRectangularShape){
                            ((MiRectangularShape)li.getSelectedValue()).setDegradado(color);
                            vi.getLienzoImagen().repaint();
                        }

                    }
                }
            }
        }
    }
    /**
    *
    * Escribe el nombre en el archivo de audio
    * y lo introduce en la lista
    * @param name: Nombre de la grabacion.
    * 
    */
    public void setnamerec(String name){
        File nuevo = new File(name);
        rec.renameTo(nuevo);
        listaReproduccion.addItem(nuevo);
    }
    /**
    *
    * Lanza el cuadro de seleccionar relleno
    * Abre el cuadro de dialogo de seleccion de color con tipo "relleno"
    * 
    */
    private void RellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RellenoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                new SelCol(this,"Relleno").setVisible(true);
            }
        }
    }//GEN-LAST:event_RellenoActionPerformed
    /**
    *
    * Lanza el cuadro de seleccionar borde
    * Abre el cuadro de dialogo de seleccion de color con tipo "borde"
    * 
    */
    private void BordeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BordeActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                new SelCol(this,"Borde").setVisible(true);
            }
        }
    }//GEN-LAST:event_BordeActionPerformed
    /**
    *
    * Reproduce el audio seleccionado en la lista
    * Si se esta reproduciondo o grabando este boton se 
    * desactiva.
    * 
    */
    private void botonplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonplayActionPerformed
        // TODO add your handling code here:
        
        
        if(Escritorio.getSelectedFrame() instanceof VentanaVideo){
            VentanaVideo vi = (VentanaVideo) Escritorio.getSelectedFrame();
            if(vi!=null){
                vi.play();
                 botonRecord.setEnabled(false);
                 Instantanea.setEnabled(true);
            }
        }else{
            player = null; 
            File f = (File)listaReproduccion.getSelectedItem(); 
            if(f!=null){   
                player = new SMClipPlayer(f);
                ((SMClipPlayer)player).addLineListener( new ManejadorAudio(botonplay,botonstop,botonRecord));
                if (player != null) {     
                    player.play();
                
                }
            }
        }
    }//GEN-LAST:event_botonplayActionPerformed
    /**
    *
    * Establece en habilitado o deshabilitado los controles del video en
    * caso de que hayamos seleccionado una ventana de video de nuevo
    * 
    */
    public void actualizarControlador(){
        if(Escritorio.getSelectedFrame() instanceof VentanaVideo){
            VentanaVideo vi = (VentanaVideo) Escritorio.getSelectedFrame();
            if(vi!=null){
                Instantanea.setEnabled(true);
                botonstop = vi.getBotonStop();
                botonplay = vi.getBotonPlay();
            }
        }else{
            if(Escritorio.getSelectedFrame() instanceof VentanaInternaCamara){
                VentanaInternaCamara vi = (VentanaInternaCamara) Escritorio.getSelectedFrame();
                Instantanea.setEnabled(true);

            }
        }
    }
    /**
    *
    * Cuando selecionamos un elemendo de la lista de reproduccion de audio,
    * deseleccionamos la ventana interna activa para que los controles 
    * multimedia se utiliceen para el audio
    * 
    */
    private void listaReproduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaReproduccionActionPerformed
        // TODO add your handling code here:
                VentanaInterna vi= (VentanaInterna)Escritorio.getSelectedFrame();
        if(vi!= null){
         try
                {
                    vi.setSelected(false);
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }
        botonplay.setEnabled(true);
        botonstop.setEnabled(false);
        Instantanea.setEnabled(false);
        botonRecord.setEnabled(true);
    }//GEN-LAST:event_listaReproduccionActionPerformed
    /**
    *
    * Para el audio seleccionado en la lista,
    * o la grabacion de el mismo dando lugar a 
    * seleccionar su nombre.
    * 
    */
    private void botonstopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonstopActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaMultimedia){
            VentanaMultimedia vi = (VentanaMultimedia) Escritorio.getSelectedFrame();
            if(vi!=null){
                vi.stop();
                    botonRecord.setEnabled(true);
                    Instantanea.setEnabled(true);
                    botonplay.setEnabled(true);
                    botonstop.setEnabled(false);

            }
        }else{
            if (player != null) {     
                    player.stop();
                    Instantanea.setEnabled(false);

                }
            if (recorder != null){
                recorder.stop();
                recorder = null;
                botonplay.setEnabled(true);
                botonstop.setEnabled(false);
                botonRecord.setEnabled(true);
                new SelString(this,true).setVisible(true);
                Instantanea.setEnabled(false);


            }
        }

    }//GEN-LAST:event_botonstopActionPerformed
    /**
    *
    * Comienza a grabar un audio
    * desactiva el boton de grabar y el boton de play
    * 
    */
    private void botonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRecordActionPerformed
        // TODO add your handling code here:
                VentanaInterna vi= (VentanaInterna)Escritorio.getSelectedFrame();
        if(vi!= null){
         try
                {
                    vi.setSelected(false);
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
        }
        botonplay.setEnabled(false);
        botonstop.setEnabled(true);
        botonRecord.setEnabled(false);
        recorder = new SMSoundRecorder(rec);
        recorder.record();
        
    }//GEN-LAST:event_botonRecordActionPerformed
    /**
    *
    * Introduce la coordenada X de una figura de 
    * la nueva posicion
    * 
    * 
    */
    private void XValor(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_XValor
        // TODO add your handling code here:
        
        cordenadaX = Integer.parseInt(X.getValue().toString());
        

    }//GEN-LAST:event_XValor
    /**
    *
    * Introduce la coordenada Y de una figura
    * de la nueva posicion
    * 
    */
    private void YValor(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_YValor
        // TODO add your handling code here:
        cordenadaY = Integer.parseInt(Y.getValue().toString());
        

    }//GEN-LAST:event_YValor
    /**
    *
    * Le sube la prioridad a una figura 
    * Al subir la prioridad este hace que la figura se dibuje
    * encima de la otra, este efecto se obtiene
    * cambiando de orden las figuras de la lista del lienzo
    * 
    */
    private void SubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubirActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
            if (vi != null) {
             int numero = li.getSelectedIndex();
             List<MiFigura> lista = vi.getLienzoImagen().GetLista();
             if(numero < lista.size()-1){
                 MiFigura uno = lista.get(numero+1);
                 lista.set(numero+1, li.getSelectedValue());
                 lista.set(numero, uno);
             }
             vi.getLienzoImagen().setLista(lista);
             actualizarlista();
            }
        }
    }//GEN-LAST:event_SubirActionPerformed
    /**
    *
    * Le baja la prioridad a una figura 
    * Al bajar la prioridad este hace que la figura se dibuje
    * debajo de la otra, este efecto se obtiene
    * cambiando de orden las figuras de la lista del lienzo
    * 
    */
    private void BajarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BajarActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
            if (vi != null) {
              int numero = li.getSelectedIndex();
             List<MiFigura> lista = vi.getLienzoImagen().GetLista();
             if(numero > 0){
                 MiFigura uno = lista.get(numero-1);
                 lista.set(numero-1, li.getSelectedValue());
                 lista.set(numero, uno);
             }
             vi.getLienzoImagen().setLista(lista);
             actualizarlista();
            }
        }
    }//GEN-LAST:event_BajarActionPerformed
    /**
    *
    * Elimina una figura de la lista
    * Lee la lista del lienzo de la ventana seleccionada y 
    * borra el objeto seleccionado
    * 
    */
    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
            if (vi != null) {
              int numero = li.getSelectedIndex();
             lista = vi.getLienzoImagen().GetLista();
                 lista.remove(numero);
             vi.getLienzoImagen().setLista(lista);
             actualizarlista();
            }
        }
    }//GEN-LAST:event_EliminarActionPerformed
    /**
    *
    * Actualiza el puntero para mostrar su ubicacion
    * @param x: coordenada de la x
    * @param y: coordenada de la y
    * establece la coordenada de la localizacion
    * del mouse en la ventana interna
    * 
    */
    public void actualizarpuntero(int x,int y){
        cordenadaX = x;
        cordenadaY = y;
        X.setValue(x);
        Y.setValue(y);
    }
    /**
    *
    * Cuando cambiamos la figura seleccionada
    * de la lista, se establece la coordenada de la
    * figura en las coordenada de la ventana principal,
    * a continuacion manda una señal al lienzo para decirle que
    * estamos en modo editar un figura.
    * 
    */
    private void liValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liValueChanged
        // TODO add your handling code here:
        
          if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){      
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame(); 
            
            if (vi != null) {
              if(li.getSelectedValue() != null){
                Actualizarfigura(li.getSelectedValue());
                actualizarpuntero((int)li.getSelectedValue().getLocation().getX(),(int)li.getSelectedValue().getLocation().getY());
                vi.getLienzoImagen().setEditar(li.getSelectedIndex());
              }
            }
          }
    }//GEN-LAST:event_liValueChanged
    /**
    *
    * Cambiamos de localizacion la figura seleccionada de
    * la lista con las coordenadas establecidas en la 
    * ventana principal.
    * Creamos un punto con dicha localizaacion y luego establecemos ese
    * punto en la figura seleccionada en la lista de las figuras de la 
    * ventana principal
    * 
    */
    private void modActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi=(VentanaLienzo)Escritorio.getSelectedFrame();   
            if (vi != null) {
                if(li.getSelectedValue() != null){
                    int numero = li.getSelectedIndex();
                    lista = vi.getLienzoImagen().GetLista();
                    Point2D punto = new Point2D.Double(cordenadaX,cordenadaY);
                    lista.get(numero).setLocation(punto);
                    vi.getLienzoImagen().setLista(lista);
                    vi.getLienzoImagen().repaint();
                    this.actualizarlista();
                    li.setSelectedIndex(numero);
                }
            }
        }
    }//GEN-LAST:event_modActionPerformed
    /**
    *
    * Aparece el cuadro de dialogo de Acerca de
    * 
    */
    private void AcercadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcercadeActionPerformed
        // TODO add your handling code here:
        new Acercade(this,true).setVisible(true);
    }//GEN-LAST:event_AcercadeActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed
    /**
    *
    *  Funcion propia LookuOp: (sqrt(log10(xw))
    * Extraemos los datos del lienzo y le aplicamos la
    * funcion raiz cuadrada del logaritmo en base 10
    * 
    */
    private void MiFuncionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiFuncionActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if (vi != null){
                imgSource = vi.getLienzoImagen().getImagen(false);
                try
                {
                    byte[] lt = new byte[256];
                    //La funcion es raiz del log(wx)
                    for (int i = 0; i < 256; ++i){
                        lt[i] = (byte)Math.abs(255 * Math.sqrt(Math.log(90 * i )));
                    }
                    ByteLookupTable slt = new ByteLookupTable(0, lt);
                    LookupOp lop = new LookupOp(slt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e)
                {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_MiFuncionActionPerformed

    private void jSlider2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider2FocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jSlider2FocusLost
    /**
    *
    * Cambia el numero de transparencia
    * Establece el valor de la transparencia de la figura,
    * este valor se establece en el lienzo de la ventana selecciona
    * Si hay una figura seleccionada en la lista de figuras de la
    * ventana principal, establece este valor a dicha figura
    * 
    */
    private void numtransStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numtransStateChanged
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if (vi != null){
                vi.getLienzoImagen().setNumtrans(numtrans.getValue());
                if(li.getSelectedValue() != null){
                    li.getSelectedValue().setNumtrans(numtrans.getValue());
                }
                vi.getLienzoImagen().repaint();
            }
        }
    }//GEN-LAST:event_numtransStateChanged
    /**
    *
    * Cambia el  color de degradado
    * Abre el cuadro de dialogo de seleccion de color con tipo "degradado"
    * 
    */
    private void DegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegradadoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                new SelCol(this,"Degradado").setVisible(true);
            }
        }
    }//GEN-LAST:event_DegradadoActionPerformed

   /**
    *
    * Duplicar una imagen
    * Para ello creamos un nuevo BufferedImage desde 0 para que 
    * este no este referenciado y por tanto cada uno tenga
    * sus propias caracteristicas
    * 
    */
    private void DuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicarActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                BufferedImage copia = new BufferedImage(vi.getLienzoImagen().getImagen(false).getWidth(),vi.getLienzoImagen().getImagen(false).getHeight(),vi.getLienzoImagen().getImagen(true).getType());
                Graphics g = copia.getGraphics();
                g.drawImage(vi.getLienzoImagen().getImagen(true), 0, 0, null);
                VentanaLienzo vi2 = new VentanaLienzo(this,copia.getHeight(),copia.getWidth());
                vi2.getLienzoImagen().setImagen(copia);
                Escritorio.add(vi2);
                vi2.setTitle("Copia de" + vi.getTitle());
                vi2.setVisible(true);
                actualizarframe();
                vi2.actualizardesplazable();
                vi2.repaint();

            }
        }
       
    }//GEN-LAST:event_DuplicarActionPerformed
    /**
    *
    * Tintar una imagen con el color de relleno
    * sacamos el valor del porcentaje de tintado del slider de
    * tintado, el color utilizado para el tinte es el del relleno,
    * para ello aplicamos el filtro a la imagen con TintOp
    * 
    */
    private void TintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TintadoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                imgSource = vi.getLienzoImagen().getImagen(true);
                TintOp tintado = new TintOp(Relleno.getBackground(),(Tinte.getValue())/100f); 
                tintado.filter(imgSource, imgSource); 
                vi.getLienzoImagen().setImagen(imgSource);
                vi.getLienzoImagen().repaint();
                vi.actualizardesplazable();
            }
        }
    }//GEN-LAST:event_TintadoActionPerformed
    /**
    *
    * Funcion ecualizacion
    * Comprobamos si la ventana contiene un lienzo, una vez hecho esto
    * usamos el filtro equalizationOp con la imagen
    * 
    */
    private void EcualizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EcualizacionActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                imgSource = vi.getLienzoImagen().getImagen(true);
                EqualizationOp ecualizacion = new EqualizationOp(); 
                ecualizacion.filter(imgSource, imgSource); 
                vi.getLienzoImagen().setImagen(imgSource);
                vi.getLienzoImagen().repaint();
                vi.actualizardesplazable();
            }
        }
    }//GEN-LAST:event_EcualizacionActionPerformed
    /**
    *
    * Funcion Sepia
    * Comprobamos si la ventana contiene un lienzo, una vez hecho esto
    * usamos el filtro SepiaOp con la imagen
    * 
    */
    private void SepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SepiaActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                imgSource = vi.getLienzoImagen().getImagen(true);
                SepiaOp sepia = new SepiaOp();
                sepia.filter(imgSource, imgSource);
                vi.getLienzoImagen().setImagen(imgSource);
                vi.getLienzoImagen().repaint();
                vi.actualizardesplazable();
            }
        }
    }//GEN-LAST:event_SepiaActionPerformed
    /**
    *
    * Funcion umbralizacion
    * Comprobamos si la ventana contiene un lienzo, una vez hecho esto
    * usamos el filtro UmbralizacionOp con la imagen
    * 
    */
    private void UmbralizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UmbralizadorActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                imgSource = vi.getLienzoImagen().getImagen(true);
                UmbralizacionOp umbralizacion = new UmbralizacionOp(umbral.getValue());
                umbralizacion.filter(imgSource, imgSource);
                vi.getLienzoImagen().setImagen(imgSource);
                vi.getLienzoImagen().repaint();
                vi.actualizardesplazable();
            }
        }
    }//GEN-LAST:event_UmbralizadorActionPerformed
    /**
    *
    * Funcion Negativo
    * Comprobamos si la ventana contiene un lienzo, una vez hecho esto
    * usamos el filtro negativoOp con la imagen
    * 
    */
    private void NegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                imgSource = vi.getLienzoImagen().getImagen(true);
                NegativoOp negativo = new NegativoOp();
                negativo.filter(imgSource, imgSource);
                vi.getLienzoImagen().setImagen(imgSource);
                vi.getLienzoImagen().repaint();
                vi.actualizardesplazable();
            }
        }
    }//GEN-LAST:event_NegativoActionPerformed
    /**
    *
    * Funcion Random
    * Comprobamos si la ventana contiene un lienzo, una vez hecho esto
    * usamos el filtro randomOp con la imagen
    * 
    */
    private void RandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomActionPerformed
        // TODO add your handling code here:
        
        VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
        if(vi!=null){
            imgSource = vi.getLienzoImagen().getImagen(true);
            RandomOp random = new RandomOp();
            random.filter(imgSource, imgSource);
            vi.getLienzoImagen().setImagen(imgSource);
            vi.getLienzoImagen().repaint();
            vi.actualizardesplazable();
        }
    
    }//GEN-LAST:event_RandomActionPerformed
    /**
    *
    * Activa y desactiva la barra de editar imagenes 
    * 
    */
    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        // TODO add your handling code here:
        barraimagen = !barraimagen;
        jPanel2.setVisible(barraimagen);
        jSeparator2.setVisible(barraimagen);
        
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    /**
    *
    * Establece el degradado como horizontal
    * 
    */
    private void deghActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deghActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                vi.getLienzoImagen().setdeghorizontal(!vi.getLienzoImagen().getdeghorizontal());
                if(vi.getLienzoImagen().getdeghorizontal() == true){
                    degv.setSelected(false);
                }
                if(li.getSelectedValue()!= null){
                    if(li.getSelectedValue() instanceof MiRectangularShape){
                        ((MiRectangularShape)li.getSelectedValue()).setHorizontal(!(((MiRectangularShape)li.getSelectedValue()).getHorizontal()));
                        vi.getLienzoImagen().repaint();
                    }
                 
                }
            }
        }
    }//GEN-LAST:event_deghActionPerformed
    /**
    *
    * Establece el degradado como vertical
    * 
    */
    private void degvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degvActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                vi.getLienzoImagen().setdegvertical(!vi.getLienzoImagen().getdegvertical());
                if(vi.getLienzoImagen().getdegvertical() == true){
                    degh.setSelected(false);
                }
                if(li.getSelectedValue()!= null){
                    if(li.getSelectedValue() instanceof MiRectangularShape){
                        ((MiRectangularShape)li.getSelectedValue()).setVertical(!(((MiRectangularShape)li.getSelectedValue()).getVertical()));
                        vi.getLienzoImagen().repaint();
                    }
                 
                }
            }
        }
    }//GEN-LAST:event_degvActionPerformed
    /**
    *
    * Activa o desactiva las herramientas de audio
    * 
    */
    private void jCheckBoxMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        barraAudio = !barraAudio;
        jPanel18.setVisible(barraAudio);
    }//GEN-LAST:event_jCheckBoxMenuItem4ActionPerformed
    /**
    *
    * Activa o desactiva la lista de figuras
    * llama a la funcion para hacer desaparecer la lista de
    * figuras
    * 
    */
    private void jCheckBoxMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem5ActionPerformed
        // TODO add your handling code here:
        barralista = !barralista;
        actualizarframe();
    }//GEN-LAST:event_jCheckBoxMenuItem5ActionPerformed
    /**
    *
    * Establece el trazado del dibujo en el lienzo,
    * este puede ser lineal o discontinuo
    * 
    */
    private void TrazadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrazadoActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            if(vi!=null){
                if(Trazado.getSelectedItem().toString() == "linea discontinua"){
                    vi.getLienzoImagen().setDiscontinua(true);
                    if(li.getSelectedValue()!=null){
                        li.getSelectedValue().setDiscontinua(true);
                    }
                }else{
                    vi.getLienzoImagen().setDiscontinua(false);     
                    if(li.getSelectedValue()!=null){
                        li.getSelectedValue().setDiscontinua(false);
                    }
                }
                vi.getLienzoImagen().repaint();            
            }
        }
    }//GEN-LAST:event_TrazadoActionPerformed
    /**
    *
    * Abre una ventana interna con la imagen que capta
    * de la camara, si es que el dispositivo tiene una
    * tambien inicializa los botones
    * 
    */    
    private void CamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CamaraActionPerformed
        // TODO add your handling code here:
        VentanaInternaCamara vi = new VentanaInternaCamara(this); 
                vi.setTitle("cam");
                vi.setVisible(true);            
                Escritorio.add(vi);  
                Camara.setEnabled(false);
                Instantanea.setEnabled(true);
                botonplay.setEnabled(false);
                botonstop.setEnabled(true);
    }//GEN-LAST:event_CamaraActionPerformed
    /**
    *
    * Reestablece los botones de la camara y de la 
    * captura de instantanea
    * 
    */
    public void nuevaCam(){
        Camara.setEnabled(true);
        Instantanea.setEnabled(false);
    }
    /**
    *
    * Comprueba que tenemos una ventana del tipo multimedia abierta,
    * si es asi crea una ventana nueva lienzo con la imagen que se 
    * mostraba en la ventana multimedia
    * 
    */
    private void InstantaneaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstantaneaActionPerformed
        // TODO add your handling code here:
        if(Escritorio.getSelectedFrame() instanceof VentanaMultimedia){
            VentanaMultimedia mul = (VentanaMultimedia) Escritorio.getSelectedFrame();
            BufferedImage img = mul.getImagen();
            if(img!=null){
                VentanaLienzo vi = new VentanaLienzo(this,img.getHeight(),img.getWidth()); 
                BufferedImage copia = new BufferedImage(vi.getLienzoImagen().getImagen(false).getWidth(),vi.getLienzoImagen().getImagen(false).getHeight(),vi.getLienzoImagen().getImagen(true).getType());
                Graphics g = copia.getGraphics();
                g.drawImage(vi.getLienzoImagen().getImagen(true), 0, 0, null);
                VentanaLienzo vi2 = new VentanaLienzo(this,copia.getHeight(),copia.getWidth());
                vi2.getLienzoImagen().setImagen(copia);
                vi2.getLienzoImagen().setImagen(img);      
                vi2.setTitle("captura"); 
                this.Escritorio.add(vi2);        
                vi2.setVisible(true);     
                actualizarframe();
                vi2.actualizardesplazable();
                vi2.repaint();
            }
            
        }

    }//GEN-LAST:event_InstantaneaActionPerformed
    /**
    *
    * Funcion Bosque
    * Comprobamos si la ventana contiene un lienzo, una vez hecho esto
    * usamos el filtro BosqueOp con la imagen
    * 
    */
    private void FiltroBosqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltroBosqueActionPerformed
        // TODO add your handling code here:
        VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
        if(vi!=null){
            imgSource = vi.getLienzoImagen().getImagen(true);
            FiltroBosqueOp bosque = new FiltroBosqueOp();
            bosque.filter(imgSource, imgSource);
            vi.getLienzoImagen().setImagen(imgSource);
            vi.getLienzoImagen().repaint();
            vi.actualizardesplazable();
        }        
    }//GEN-LAST:event_FiltroBosqueActionPerformed

    private void listaReproduccionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaReproduccionItemStateChanged

    }//GEN-LAST:event_listaReproduccionItemStateChanged
    /**
    *
    * Escalar la imagen seleccionada
    * @param indice: valor de la escala
    * Aumenta o disminuye la imagen del lienzo seleccionada en base al indice que pasamos
    * por parametro
    */
    private void escalar(double indice){
        if(Escritorio.getSelectedFrame() instanceof VentanaLienzo){
            VentanaLienzo vi = (VentanaLienzo) Escritorio.getSelectedFrame();
            imgSource = vi.getLienzoImagen().getImagen(true);
            AffineTransform at = AffineTransform.getScaleInstance(indice, indice);
            AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR); 
            BufferedImage imgdest = atop.filter(imgSource, null);
            vi.getLienzoImagen().setImagen(imgdest);
            vi.repaint();
            vi.actualizardesplazable();
        }
    }


 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Acercade;
    private javax.swing.JToggleButton Alisar;
    private javax.swing.JButton Bajar;
    private javax.swing.JButton Borde;
    private javax.swing.JButton Camara;
    private javax.swing.JButton Degradado;
    private javax.swing.JButton Duplicar;
    private javax.swing.JButton Ecualizacion;
    private javax.swing.JMenu Edicion;
    private javax.swing.JCheckBoxMenuItem EdicionVerbarra;
    private javax.swing.JButton Eliminar;
    private javax.swing.JDesktopPane Escritorio;
    private javax.swing.JButton EspectroColor;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem FileAbrir;
    private javax.swing.JMenuItem FileGuardar;
    private javax.swing.JMenuItem FileNuevo;
    private javax.swing.JComboBox<String> Filtro;
    private javax.swing.JButton FiltroBosque;
    private javax.swing.JButton Instantanea;
    private javax.swing.JButton MiFuncion;
    private javax.swing.JButton Negativo;
    private javax.swing.JButton Random;
    private javax.swing.JButton Relleno;
    private javax.swing.JButton Seno;
    private javax.swing.JButton Sepia;
    private javax.swing.JToggleButton String;
    private javax.swing.JButton Subir;
    private javax.swing.JButton Tintado;
    private javax.swing.JSlider Tinte;
    private javax.swing.JComboBox<String> Trazado;
    private javax.swing.JButton Umbralizador;
    private javax.swing.JSpinner X;
    private javax.swing.JSpinner Y;
    private javax.swing.JButton aclarar;
    private javax.swing.JButton aumentar;
    private javax.swing.JButton botonRecord;
    private javax.swing.JButton botonplay;
    private javax.swing.JButton botonstop;
    private javax.swing.JButton contrastenormal;
    private javax.swing.JButton contrasteoscuro;
    private javax.swing.JToggleButton degh;
    private javax.swing.JToggleButton degv;
    private javax.swing.JToggleButton elipse;
    private javax.swing.JComboBox<String> espectro;
    private javax.swing.JLabel estado;
    private javax.swing.JPanel head;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem5;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JToggleButton lapiz;
    private javax.swing.JList<MiFigura> li;
    private javax.swing.JToggleButton linea;
    private javax.swing.JMenu list;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.ButtonGroup menu;
    private javax.swing.JButton mod;
    private javax.swing.JPanel nav1;
    private javax.swing.JPanel nav2;
    private javax.swing.JPanel nav3;
    private javax.swing.JPanel nav4;
    private javax.swing.JSpinner numeroalisar;
    private javax.swing.JSlider numtrans;
    private javax.swing.JPanel pie;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JButton reducir;
    private javax.swing.JToggleButton relleno;
    private javax.swing.JSlider umbral;
    // End of variables declaration//GEN-END:variables
}
